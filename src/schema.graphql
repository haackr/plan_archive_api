### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Mutation {
  createOneSchools(data: SchoolsCreateInput!): Schools!
  createSchool(ClusterID: String, SchoolId: String!, SchoolName: String!): Schools!
  deleteOneSchools(where: SchoolsWhereUniqueInput!): Schools
  deleteSchool(SchoolId: String!): Schools!
  login(password: String!, username: String!): User
  register(password: String!, passwordVerify: String!, username: String!): User
  updateOneSchools(data: SchoolsUpdateInput!, where: SchoolsWhereUniqueInput!): Schools
  updateSchool(ClusterId: String, NewSchoolId: String, SchoolId: String!, SchoolName: String): Schools!
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  allClusters: [Schools]!
  allSchools: [Schools]!
  allUsers: [User]!
  schools(after: SchoolsWhereUniqueInput, before: SchoolsWhereUniqueInput, first: Int, last: Int): [Schools!]!
}

type Schools {
  Cluster: Schools
  ClusterID: String
  ClusterSchools(after: SchoolsWhereUniqueInput, before: SchoolsWhereUniqueInput, first: Int, last: Int): [Schools!]!
  SchoolID: String!
  SchoolName: String!
}

input SchoolsCreateInput {
  Cluster: SchoolsCreateOneWithoutClusterSchoolsInput
  ClusterSchools: SchoolsCreateManyWithoutClusterInput
  SchoolID: String!
  SchoolName: String!
}

input SchoolsCreateManyWithoutClusterInput {
  connect: [SchoolsWhereUniqueInput!]
  connectOrCreate: [SchoolsCreateOrConnectWithoutClusterInput!]
  create: [SchoolsCreateWithoutClusterInput!]
}

input SchoolsCreateOneWithoutClusterSchoolsInput {
  connect: SchoolsWhereUniqueInput
  connectOrCreate: SchoolsCreateOrConnectWithoutClusterSchoolsInput
  create: SchoolsCreateWithoutClusterSchoolsInput
}

input SchoolsCreateOrConnectWithoutClusterInput {
  create: SchoolsCreateWithoutClusterInput!
  where: SchoolsWhereUniqueInput!
}

input SchoolsCreateOrConnectWithoutClusterSchoolsInput {
  create: SchoolsCreateWithoutClusterSchoolsInput!
  where: SchoolsWhereUniqueInput!
}

input SchoolsCreateWithoutClusterInput {
  ClusterSchools: SchoolsCreateManyWithoutClusterInput
  SchoolID: String!
  SchoolName: String!
}

input SchoolsCreateWithoutClusterSchoolsInput {
  Cluster: SchoolsCreateOneWithoutClusterSchoolsInput
  SchoolID: String!
  SchoolName: String!
}

input SchoolsScalarWhereInput {
  AND: [SchoolsScalarWhereInput!]
  ClusterID: StringNullableFilter
  NOT: [SchoolsScalarWhereInput!]
  OR: [SchoolsScalarWhereInput!]
  SchoolID: StringFilter
  SchoolName: StringFilter
}

input SchoolsUpdateInput {
  Cluster: SchoolsUpdateOneWithoutClusterSchoolsInput
  ClusterSchools: SchoolsUpdateManyWithoutClusterInput
  SchoolID: StringFieldUpdateOperationsInput
  SchoolName: StringFieldUpdateOperationsInput
}

input SchoolsUpdateManyMutationInput {
  SchoolID: StringFieldUpdateOperationsInput
  SchoolName: StringFieldUpdateOperationsInput
}

input SchoolsUpdateManyWithoutClusterInput {
  connect: [SchoolsWhereUniqueInput!]
  connectOrCreate: [SchoolsCreateOrConnectWithoutClusterInput!]
  create: [SchoolsCreateWithoutClusterInput!]
  delete: [SchoolsWhereUniqueInput!]
  deleteMany: [SchoolsScalarWhereInput!]
  disconnect: [SchoolsWhereUniqueInput!]
  set: [SchoolsWhereUniqueInput!]
  update: [SchoolsUpdateWithWhereUniqueWithoutClusterInput!]
  updateMany: [SchoolsUpdateManyWithWhereWithoutClusterInput!]
  upsert: [SchoolsUpsertWithWhereUniqueWithoutClusterInput!]
}

input SchoolsUpdateManyWithWhereWithoutClusterInput {
  data: SchoolsUpdateManyMutationInput!
  where: SchoolsScalarWhereInput!
}

input SchoolsUpdateOneWithoutClusterSchoolsInput {
  connect: SchoolsWhereUniqueInput
  connectOrCreate: SchoolsCreateOrConnectWithoutClusterSchoolsInput
  create: SchoolsCreateWithoutClusterSchoolsInput
  delete: Boolean
  disconnect: Boolean
  update: SchoolsUpdateWithoutClusterSchoolsInput
  upsert: SchoolsUpsertWithoutClusterSchoolsInput
}

input SchoolsUpdateWithoutClusterInput {
  ClusterSchools: SchoolsUpdateManyWithoutClusterInput
  SchoolID: StringFieldUpdateOperationsInput
  SchoolName: StringFieldUpdateOperationsInput
}

input SchoolsUpdateWithoutClusterSchoolsInput {
  Cluster: SchoolsUpdateOneWithoutClusterSchoolsInput
  SchoolID: StringFieldUpdateOperationsInput
  SchoolName: StringFieldUpdateOperationsInput
}

input SchoolsUpdateWithWhereUniqueWithoutClusterInput {
  data: SchoolsUpdateWithoutClusterInput!
  where: SchoolsWhereUniqueInput!
}

input SchoolsUpsertWithoutClusterSchoolsInput {
  create: SchoolsCreateWithoutClusterSchoolsInput!
  update: SchoolsUpdateWithoutClusterSchoolsInput!
}

input SchoolsUpsertWithWhereUniqueWithoutClusterInput {
  create: SchoolsCreateWithoutClusterInput!
  update: SchoolsUpdateWithoutClusterInput!
  where: SchoolsWhereUniqueInput!
}

input SchoolsWhereUniqueInput {
  SchoolID: String
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  id: String!
  isAdmin: Boolean!
  username: String!
}
